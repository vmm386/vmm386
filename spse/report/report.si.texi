\input texinfo  @c -*-Texinfo-*-
@setfilename report.info
@settitle Final Report
@footnotestyle end
@iftex
@afourpaper
@end iftex

@titlepage
@title A Virtual Machine Monitor for the Intel 80386
@subtitle Final Report
@subtitle April 1995
@author S.P.S. Evans
@end titlepage

@ifinfo
@node Top, Introduction, (dir), (dir)
@top Final Report

@menu
* Introduction::        Introduction to the Project. 
* Contribution::        My Contribution to the Project.
* Appraisal::           My Appraisal of the Project.
* Future::              Future Directions of the Project.
@end menu
@end ifinfo

@node Introduction, Contribution, Top, Top
@chapter Introduction to the Project.

The aim of the project was to write a small operating system for the Intel
80386 processor capable of supporting multiple virtual 8086 PC's using an
inbuilt mode of the 80386. This involved writing a kernel and the device
drivers to control all of the hardware and also a filing system and user
interface. We also had to create an enviroment that emulated the hardware 
of a standard PC. 

This project intrested me for several reasons. I have a strong intrest in
operating systems and operating systems technology and to have the chance to
write one was greatly welcomed. Secondly, I was intrigued by the process of 
emulating a computer environment and wanted to see what technical challenges
would arise from such a project. Because we were emulating a system already
available, there was a device interface that we had to conform to and it was
quite intresting to see how hardware could be emulatedby software. 
And finally, I wanted to gain an indepth knowledge of the architecture of the
Intel 80x86 family of processors with respect to how they work and how they
are programmed.


@node Contribution, Appraisal, Introduction, Top
@chapter My Contribution to the Project.

@node Appraisal, Future, Contribution, Top
@chapter My Appraisal of the Project.

My overall feeling about the project is that it was a success. Although we
did not accomplish the main task which was to allow full virtualisation of
the 80386's protected mode, I believe that we made substantal progress towards
this goal. I have definitely gained a fuller understanding of the design and
construction of operating systems and of supporting virtualisation of another
system. Although this project could be expanded in many directions and taken
further in all of these, the task of developing and writing the core components
was accomplished. Obvisouly more time could be spent writing virtual and 
physical device drivers given the range of hardware accessories available
and refining the current devices would also benefit the overall system in terms
of speed, efficiency and stability. Personally I believe that we have written
a small, clean and relatively bugfree operating system and for a first attempt
I am pleased with the result.

The project group consisting of John, Chris and myself worked well together.
Although we did impose deadlines at the start of the project, these proved
to be unrealistic as we came upon problems that we hadnt encountered before.
The interaction between the individual members of the group was also good and
no one minded one person for example debugging someone elses code or adding
bits to it. We also had an advantage because the project itself was exciting
and we all showed a great deal of enthusiam towards it. This resulted in large
programming sessions which might last several hours where all members were
working on the same piece of source code and the ideas generated and problem
solved by just all sitting around one computer with each person adding parts
as they saw fit. The design of the project also meant that a co-operative
effort could be made with the design of the kernel whilst seperate parts in
modules could be developed on one's own. The running of the group was also
done in a democratic way, and no one tried to impose their ideas on everyone
else.



@node Future, , Appraisal, Top
@chapter Future Directions of the Project.

Given that the project is an operating system, there are many directions in
which it can be taken. A few of the ideas for expansion of the system are
outlined as follows:

@section Adding Virtual 32-bit Protected Mode Tasks.
This was the original aim of the project and if completed would allow almost
any operating system for the PC to be run under our operating system. This is
a very complicated addition but having the core system already completed would
mean that only the parts concerned with emultaing the behaviour of the Intel
80386 in this mode have to be written. Also the emulation of the hardware is
independant to the operating mode of the processor so the virtual devices
that have already been written can be reused without any changes.

@section Handling Of The Floating Point Unit (FPU).
Currently, no attempt is made to save or restore the state of this processor
in anyway. This has serious implications because if more than one process
(either part of the operating system itself or a virtual machine) attempted
to use the FPU, erorrs could occur and the operating system itself could
stop working.

@section Emulation Of A Floating Point Unit.
This is in addition to the above idea and would require a module designed
to emulate all of the functions of a FPU.  The 80386 processor has support
for allowing a FPU emulation unit to exist and although this would be a
large project to undertake, it would give any machine running the operating
system virtual machines with a complete CPU/FPU pair regardless of wether an
FPU was installed in the actual machine.

@section Adding virtual memory.
Currently the operating system does not support using a disk unit to provide
extra memory to the system. Because each machine could use upto one megabyte
of memory in its simplest configuration, this would be a useful feature.
Having used a paged memory architecture to implement the memory subsystem
should mean that the addition of such a feature would not be too difficult to
implement.

@section Adding Native Tasks.
All processes running at the moment currently reside in the kernel's memory
address space and this means that processes can interfere with each others
data and code areas. Having native tasks would allow protection between tasks
and could even mean that the development environment could be moved from
Linux to VMM/386.

@section A Virtual File System (VFS).
Currently all access to the files on a disk unit go via VMM/386's native
filesystem. Unfortuantley this means that it is almost impossible to use
disks with other file systems. Adding a VFS layer would mean that modules
could be written for other filing systems such as MS-DOS's FAT and OS/2's
HPFS systems. This would give VMM/386 better interoperability with other
operating systems residing on the same disk unit.

@section A Virtual Network.
This is an ambitious addition to the project but one that would be of great
use. It would require the construction of a virtual device to emulate a
network card for each virtual machine and a process to act as a network
between these virtual network cards. This would add two useful abilities to
the project:

@itemize @bullet
@item
The ability to allow virtual machines to communicate to each other via a common
networking protocol for example TCP/IP.

@item
The ability to share disks. This is an important function because currently
if more than one task has access to the same hard disk and they are both using
the same partition then corruption of the data can occur on that disk because
each virtual machine assumes it has total control over that disks and would
not be taking account of changes made by the other machines. This is especially
true if the virtual machines are buffering data or if two machines both make 
changes to the data at the same time. By using a virtual network, only one
machine need be given access to the hard disk. This virtual machine could then
run a network server program and all the other virtual machines could run
network client software so only one virtual machine actually had `physical'
access to the hard disk.
@end itemize

@section Writing A DOS Extender
Adding a module to act as a DOS Extender would be a useful facility. Although
only of use to virtual machines running the MS-DOS operating system, it would
enable 32-bit DOS programs to run. It would also be a good start to finally 
adding full 80386 Protected Mode virtualisation. My providing either VCPI
(Virtual Control Program Interface) or DPMI (Dos Protected Mode Interface)
calls it could also allow an operating systems writer to implement a protected
mode operating system using calls to this module to emulate some of the 80386's
privileged instruction. It would allow the writer to use VMM/386 as a testbed
environment for developing an operating system with only minimal changes being
required when finally making the operating system run on its own.
 
@bye

Local Variables:
compile-command: "makeinfo --no-headers -o report.doc report.texi"
End:
